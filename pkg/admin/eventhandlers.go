// Code generated by \"eventhandlers\"; DO NOT EDIT
// See events.go

package admin

// Following are all the event types.
// Event type values are used to match the events returned by OpenTTD.
// EventTypes surrounded by __ are synthetic and are internal to gopenttd.
const (
	bannedEventType         = packetIndexServerBanned
	chatEventType           = packetIndexServerChat
	clientErrorEventType    = packetIndexServerClientError
	clientInfoEventType     = packetIndexServerClientInfo
	clientJoinEventType     = packetIndexServerClientJoin
	clientQuitEventType     = packetIndexServerClientQuit
	clientUpdateEventType   = packetIndexServerClientUpdate
	cmdLoggingEventType     = packetIndexServerCmdLogging
	cmdNamesEventType       = packetIndexServerCmdNames
	companyEconomyEventType = packetIndexServerCompanyEconomy
	companyInfoEventType    = packetIndexServerCompanyInfo
	companyNewEventType     = packetIndexServerCompanyNew
	companyRemoveEventType  = packetIndexServerCompanyRemove
	companyStatsEventType   = packetIndexServerCompanyStats
	companyUpdateEventType  = packetIndexServerCompanyUpdate
	connectEventType        = 254 // internal handler
	consoleEventType        = packetIndexServerConsole
	dateEventType           = packetIndexServerDate
	disconnectEventType     = 254 // internal handler
	errorEventType          = packetIndexServerError
	eventEventType          = 254 // internal handler
	fullEventType           = packetIndexServerFull
	gamescriptEventType     = packetIndexServerGamescript
	newgameEventType        = packetIndexServerNewgame
	pongEventType           = packetIndexServerPong
	protocolEventType       = packetIndexServerProtocol
	rconEventType           = packetIndexServerRcon
	rconEndEventType        = packetIndexServerRconEnd
	shutdownEventType       = packetIndexServerShutdown
	welcomeEventType        = packetIndexServerWelcome
)

// bannedEventHandler is an event handler for Banned events.
type bannedEventHandler func(*Session, *Banned)

// Type returns the event type for Banned events.
func (eh bannedEventHandler) Type() uint8 {
	return bannedEventType
}

// New returns a new instance of Banned.
func (eh bannedEventHandler) New() interface{} {
	return &Banned{}
}

// Handle is the handler for Banned events.
func (eh bannedEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Banned); ok {
		eh(s, t)
	}
}

// chatEventHandler is an event handler for Chat events.
type chatEventHandler func(*Session, *Chat)

// Type returns the event type for Chat events.
func (eh chatEventHandler) Type() uint8 {
	return chatEventType
}

// New returns a new instance of Chat.
func (eh chatEventHandler) New() interface{} {
	return &Chat{}
}

// Handle is the handler for Chat events.
func (eh chatEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Chat); ok {
		eh(s, t)
	}
}

// clientErrorEventHandler is an event handler for ClientError events.
type clientErrorEventHandler func(*Session, *ClientError)

// Type returns the event type for ClientError events.
func (eh clientErrorEventHandler) Type() uint8 {
	return clientErrorEventType
}

// New returns a new instance of ClientError.
func (eh clientErrorEventHandler) New() interface{} {
	return &ClientError{}
}

// Handle is the handler for ClientError events.
func (eh clientErrorEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*ClientError); ok {
		eh(s, t)
	}
}

// clientInfoEventHandler is an event handler for ClientInfo events.
type clientInfoEventHandler func(*Session, *ClientInfo)

// Type returns the event type for ClientInfo events.
func (eh clientInfoEventHandler) Type() uint8 {
	return clientInfoEventType
}

// New returns a new instance of ClientInfo.
func (eh clientInfoEventHandler) New() interface{} {
	return &ClientInfo{}
}

// Handle is the handler for ClientInfo events.
func (eh clientInfoEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*ClientInfo); ok {
		eh(s, t)
	}
}

// clientJoinEventHandler is an event handler for ClientJoin events.
type clientJoinEventHandler func(*Session, *ClientJoin)

// Type returns the event type for ClientJoin events.
func (eh clientJoinEventHandler) Type() uint8 {
	return clientJoinEventType
}

// New returns a new instance of ClientJoin.
func (eh clientJoinEventHandler) New() interface{} {
	return &ClientJoin{}
}

// Handle is the handler for ClientJoin events.
func (eh clientJoinEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*ClientJoin); ok {
		eh(s, t)
	}
}

// clientQuitEventHandler is an event handler for ClientQuit events.
type clientQuitEventHandler func(*Session, *ClientQuit)

// Type returns the event type for ClientQuit events.
func (eh clientQuitEventHandler) Type() uint8 {
	return clientQuitEventType
}

// New returns a new instance of ClientQuit.
func (eh clientQuitEventHandler) New() interface{} {
	return &ClientQuit{}
}

// Handle is the handler for ClientQuit events.
func (eh clientQuitEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*ClientQuit); ok {
		eh(s, t)
	}
}

// clientUpdateEventHandler is an event handler for ClientUpdate events.
type clientUpdateEventHandler func(*Session, *ClientUpdate)

// Type returns the event type for ClientUpdate events.
func (eh clientUpdateEventHandler) Type() uint8 {
	return clientUpdateEventType
}

// New returns a new instance of ClientUpdate.
func (eh clientUpdateEventHandler) New() interface{} {
	return &ClientUpdate{}
}

// Handle is the handler for ClientUpdate events.
func (eh clientUpdateEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*ClientUpdate); ok {
		eh(s, t)
	}
}

// cmdLoggingEventHandler is an event handler for CmdLogging events.
type cmdLoggingEventHandler func(*Session, *CmdLogging)

// Type returns the event type for CmdLogging events.
func (eh cmdLoggingEventHandler) Type() uint8 {
	return cmdLoggingEventType
}

// New returns a new instance of CmdLogging.
func (eh cmdLoggingEventHandler) New() interface{} {
	return &CmdLogging{}
}

// Handle is the handler for CmdLogging events.
func (eh cmdLoggingEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CmdLogging); ok {
		eh(s, t)
	}
}

// cmdNamesEventHandler is an event handler for CmdNames events.
type cmdNamesEventHandler func(*Session, *CmdNames)

// Type returns the event type for CmdNames events.
func (eh cmdNamesEventHandler) Type() uint8 {
	return cmdNamesEventType
}

// New returns a new instance of CmdNames.
func (eh cmdNamesEventHandler) New() interface{} {
	return &CmdNames{}
}

// Handle is the handler for CmdNames events.
func (eh cmdNamesEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CmdNames); ok {
		eh(s, t)
	}
}

// companyEconomyEventHandler is an event handler for CompanyEconomy events.
type companyEconomyEventHandler func(*Session, *CompanyEconomy)

// Type returns the event type for CompanyEconomy events.
func (eh companyEconomyEventHandler) Type() uint8 {
	return companyEconomyEventType
}

// New returns a new instance of CompanyEconomy.
func (eh companyEconomyEventHandler) New() interface{} {
	return &CompanyEconomy{}
}

// Handle is the handler for CompanyEconomy events.
func (eh companyEconomyEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CompanyEconomy); ok {
		eh(s, t)
	}
}

// companyInfoEventHandler is an event handler for CompanyInfo events.
type companyInfoEventHandler func(*Session, *CompanyInfo)

// Type returns the event type for CompanyInfo events.
func (eh companyInfoEventHandler) Type() uint8 {
	return companyInfoEventType
}

// New returns a new instance of CompanyInfo.
func (eh companyInfoEventHandler) New() interface{} {
	return &CompanyInfo{}
}

// Handle is the handler for CompanyInfo events.
func (eh companyInfoEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CompanyInfo); ok {
		eh(s, t)
	}
}

// companyNewEventHandler is an event handler for CompanyNew events.
type companyNewEventHandler func(*Session, *CompanyNew)

// Type returns the event type for CompanyNew events.
func (eh companyNewEventHandler) Type() uint8 {
	return companyNewEventType
}

// New returns a new instance of CompanyNew.
func (eh companyNewEventHandler) New() interface{} {
	return &CompanyNew{}
}

// Handle is the handler for CompanyNew events.
func (eh companyNewEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CompanyNew); ok {
		eh(s, t)
	}
}

// companyRemoveEventHandler is an event handler for CompanyRemove events.
type companyRemoveEventHandler func(*Session, *CompanyRemove)

// Type returns the event type for CompanyRemove events.
func (eh companyRemoveEventHandler) Type() uint8 {
	return companyRemoveEventType
}

// New returns a new instance of CompanyRemove.
func (eh companyRemoveEventHandler) New() interface{} {
	return &CompanyRemove{}
}

// Handle is the handler for CompanyRemove events.
func (eh companyRemoveEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CompanyRemove); ok {
		eh(s, t)
	}
}

// companyStatsEventHandler is an event handler for CompanyStats events.
type companyStatsEventHandler func(*Session, *CompanyStats)

// Type returns the event type for CompanyStats events.
func (eh companyStatsEventHandler) Type() uint8 {
	return companyStatsEventType
}

// New returns a new instance of CompanyStats.
func (eh companyStatsEventHandler) New() interface{} {
	return &CompanyStats{}
}

// Handle is the handler for CompanyStats events.
func (eh companyStatsEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CompanyStats); ok {
		eh(s, t)
	}
}

// companyUpdateEventHandler is an event handler for CompanyUpdate events.
type companyUpdateEventHandler func(*Session, *CompanyUpdate)

// Type returns the event type for CompanyUpdate events.
func (eh companyUpdateEventHandler) Type() uint8 {
	return companyUpdateEventType
}

// New returns a new instance of CompanyUpdate.
func (eh companyUpdateEventHandler) New() interface{} {
	return &CompanyUpdate{}
}

// Handle is the handler for CompanyUpdate events.
func (eh companyUpdateEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*CompanyUpdate); ok {
		eh(s, t)
	}
}

// connectEventHandler is an event handler for Connect events.
type connectEventHandler func(*Session, *Connect)

// Type returns the event type for Connect events.
func (eh connectEventHandler) Type() uint8 {
	return connectEventType
}

// Handle is the handler for Connect events.
func (eh connectEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Connect); ok {
		eh(s, t)
	}
}

// consoleEventHandler is an event handler for Console events.
type consoleEventHandler func(*Session, *Console)

// Type returns the event type for Console events.
func (eh consoleEventHandler) Type() uint8 {
	return consoleEventType
}

// New returns a new instance of Console.
func (eh consoleEventHandler) New() interface{} {
	return &Console{}
}

// Handle is the handler for Console events.
func (eh consoleEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Console); ok {
		eh(s, t)
	}
}

// dateEventHandler is an event handler for Date events.
type dateEventHandler func(*Session, *Date)

// Type returns the event type for Date events.
func (eh dateEventHandler) Type() uint8 {
	return dateEventType
}

// New returns a new instance of Date.
func (eh dateEventHandler) New() interface{} {
	return &Date{}
}

// Handle is the handler for Date events.
func (eh dateEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Date); ok {
		eh(s, t)
	}
}

// disconnectEventHandler is an event handler for Disconnect events.
type disconnectEventHandler func(*Session, *Disconnect)

// Type returns the event type for Disconnect events.
func (eh disconnectEventHandler) Type() uint8 {
	return disconnectEventType
}

// Handle is the handler for Disconnect events.
func (eh disconnectEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Disconnect); ok {
		eh(s, t)
	}
}

// errorEventHandler is an event handler for Error events.
type errorEventHandler func(*Session, *Error)

// Type returns the event type for Error events.
func (eh errorEventHandler) Type() uint8 {
	return errorEventType
}

// New returns a new instance of Error.
func (eh errorEventHandler) New() interface{} {
	return &Error{}
}

// Handle is the handler for Error events.
func (eh errorEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Error); ok {
		eh(s, t)
	}
}

// eventEventHandler is an event handler for Event events.
type eventEventHandler func(*Session, *Event)

// Type returns the event type for Event events.
func (eh eventEventHandler) Type() uint8 {
	return eventEventType
}

// Handle is the handler for Event events.
func (eh eventEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Event); ok {
		eh(s, t)
	}
}

// fullEventHandler is an event handler for Full events.
type fullEventHandler func(*Session, *Full)

// Type returns the event type for Full events.
func (eh fullEventHandler) Type() uint8 {
	return fullEventType
}

// New returns a new instance of Full.
func (eh fullEventHandler) New() interface{} {
	return &Full{}
}

// Handle is the handler for Full events.
func (eh fullEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Full); ok {
		eh(s, t)
	}
}

// gamescriptEventHandler is an event handler for Gamescript events.
type gamescriptEventHandler func(*Session, *Gamescript)

// Type returns the event type for Gamescript events.
func (eh gamescriptEventHandler) Type() uint8 {
	return gamescriptEventType
}

// New returns a new instance of Gamescript.
func (eh gamescriptEventHandler) New() interface{} {
	return &Gamescript{}
}

// Handle is the handler for Gamescript events.
func (eh gamescriptEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Gamescript); ok {
		eh(s, t)
	}
}

// newgameEventHandler is an event handler for Newgame events.
type newgameEventHandler func(*Session, *Newgame)

// Type returns the event type for Newgame events.
func (eh newgameEventHandler) Type() uint8 {
	return newgameEventType
}

// New returns a new instance of Newgame.
func (eh newgameEventHandler) New() interface{} {
	return &Newgame{}
}

// Handle is the handler for Newgame events.
func (eh newgameEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Newgame); ok {
		eh(s, t)
	}
}

// pongEventHandler is an event handler for Pong events.
type pongEventHandler func(*Session, *Pong)

// Type returns the event type for Pong events.
func (eh pongEventHandler) Type() uint8 {
	return pongEventType
}

// New returns a new instance of Pong.
func (eh pongEventHandler) New() interface{} {
	return &Pong{}
}

// Handle is the handler for Pong events.
func (eh pongEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Pong); ok {
		eh(s, t)
	}
}

// protocolEventHandler is an event handler for Protocol events.
type protocolEventHandler func(*Session, *Protocol)

// Type returns the event type for Protocol events.
func (eh protocolEventHandler) Type() uint8 {
	return protocolEventType
}

// New returns a new instance of Protocol.
func (eh protocolEventHandler) New() interface{} {
	return &Protocol{}
}

// Handle is the handler for Protocol events.
func (eh protocolEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Protocol); ok {
		eh(s, t)
	}
}

// rconEventHandler is an event handler for Rcon events.
type rconEventHandler func(*Session, *Rcon)

// Type returns the event type for Rcon events.
func (eh rconEventHandler) Type() uint8 {
	return rconEventType
}

// New returns a new instance of Rcon.
func (eh rconEventHandler) New() interface{} {
	return &Rcon{}
}

// Handle is the handler for Rcon events.
func (eh rconEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Rcon); ok {
		eh(s, t)
	}
}

// rconEndEventHandler is an event handler for RconEnd events.
type rconEndEventHandler func(*Session, *RconEnd)

// Type returns the event type for RconEnd events.
func (eh rconEndEventHandler) Type() uint8 {
	return rconEndEventType
}

// New returns a new instance of RconEnd.
func (eh rconEndEventHandler) New() interface{} {
	return &RconEnd{}
}

// Handle is the handler for RconEnd events.
func (eh rconEndEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*RconEnd); ok {
		eh(s, t)
	}
}

// shutdownEventHandler is an event handler for Shutdown events.
type shutdownEventHandler func(*Session, *Shutdown)

// Type returns the event type for Shutdown events.
func (eh shutdownEventHandler) Type() uint8 {
	return shutdownEventType
}

// New returns a new instance of Shutdown.
func (eh shutdownEventHandler) New() interface{} {
	return &Shutdown{}
}

// Handle is the handler for Shutdown events.
func (eh shutdownEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Shutdown); ok {
		eh(s, t)
	}
}

// welcomeEventHandler is an event handler for Welcome events.
type welcomeEventHandler func(*Session, *Welcome)

// Type returns the event type for Welcome events.
func (eh welcomeEventHandler) Type() uint8 {
	return welcomeEventType
}

// New returns a new instance of Welcome.
func (eh welcomeEventHandler) New() interface{} {
	return &Welcome{}
}

// Handle is the handler for Welcome events.
func (eh welcomeEventHandler) Handle(s *Session, i interface{}) {
	if t, ok := i.(*Welcome); ok {
		eh(s, t)
	}
}

func handlerForInterface(handler interface{}) EventHandler {
	switch v := handler.(type) {
	case func(*Session, interface{}):
		return interfaceEventHandler(v)
	case func(*Session, *Banned):
		return bannedEventHandler(v)
	case func(*Session, *Chat):
		return chatEventHandler(v)
	case func(*Session, *ClientError):
		return clientErrorEventHandler(v)
	case func(*Session, *ClientInfo):
		return clientInfoEventHandler(v)
	case func(*Session, *ClientJoin):
		return clientJoinEventHandler(v)
	case func(*Session, *ClientQuit):
		return clientQuitEventHandler(v)
	case func(*Session, *ClientUpdate):
		return clientUpdateEventHandler(v)
	case func(*Session, *CmdLogging):
		return cmdLoggingEventHandler(v)
	case func(*Session, *CmdNames):
		return cmdNamesEventHandler(v)
	case func(*Session, *CompanyEconomy):
		return companyEconomyEventHandler(v)
	case func(*Session, *CompanyInfo):
		return companyInfoEventHandler(v)
	case func(*Session, *CompanyNew):
		return companyNewEventHandler(v)
	case func(*Session, *CompanyRemove):
		return companyRemoveEventHandler(v)
	case func(*Session, *CompanyStats):
		return companyStatsEventHandler(v)
	case func(*Session, *CompanyUpdate):
		return companyUpdateEventHandler(v)
	case func(*Session, *Connect):
		return connectEventHandler(v)
	case func(*Session, *Console):
		return consoleEventHandler(v)
	case func(*Session, *Date):
		return dateEventHandler(v)
	case func(*Session, *Disconnect):
		return disconnectEventHandler(v)
	case func(*Session, *Error):
		return errorEventHandler(v)
	case func(*Session, *Event):
		return eventEventHandler(v)
	case func(*Session, *Full):
		return fullEventHandler(v)
	case func(*Session, *Gamescript):
		return gamescriptEventHandler(v)
	case func(*Session, *Newgame):
		return newgameEventHandler(v)
	case func(*Session, *Pong):
		return pongEventHandler(v)
	case func(*Session, *Protocol):
		return protocolEventHandler(v)
	case func(*Session, *Rcon):
		return rconEventHandler(v)
	case func(*Session, *RconEnd):
		return rconEndEventHandler(v)
	case func(*Session, *Shutdown):
		return shutdownEventHandler(v)
	case func(*Session, *Welcome):
		return welcomeEventHandler(v)
	}

	return nil
}

func init() {
	registerInterfaceProvider(bannedEventHandler(nil))
	registerInterfaceProvider(chatEventHandler(nil))
	registerInterfaceProvider(clientErrorEventHandler(nil))
	registerInterfaceProvider(clientInfoEventHandler(nil))
	registerInterfaceProvider(clientJoinEventHandler(nil))
	registerInterfaceProvider(clientQuitEventHandler(nil))
	registerInterfaceProvider(clientUpdateEventHandler(nil))
	registerInterfaceProvider(cmdLoggingEventHandler(nil))
	registerInterfaceProvider(cmdNamesEventHandler(nil))
	registerInterfaceProvider(companyEconomyEventHandler(nil))
	registerInterfaceProvider(companyInfoEventHandler(nil))
	registerInterfaceProvider(companyNewEventHandler(nil))
	registerInterfaceProvider(companyRemoveEventHandler(nil))
	registerInterfaceProvider(companyStatsEventHandler(nil))
	registerInterfaceProvider(companyUpdateEventHandler(nil))
	registerInterfaceProvider(consoleEventHandler(nil))
	registerInterfaceProvider(dateEventHandler(nil))
	registerInterfaceProvider(errorEventHandler(nil))
	registerInterfaceProvider(fullEventHandler(nil))
	registerInterfaceProvider(gamescriptEventHandler(nil))
	registerInterfaceProvider(newgameEventHandler(nil))
	registerInterfaceProvider(pongEventHandler(nil))
	registerInterfaceProvider(protocolEventHandler(nil))
	registerInterfaceProvider(rconEventHandler(nil))
	registerInterfaceProvider(rconEndEventHandler(nil))
	registerInterfaceProvider(shutdownEventHandler(nil))
	registerInterfaceProvider(welcomeEventHandler(nil))
}
