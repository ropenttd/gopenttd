package global

import (
	"time"
)

type OpenttdNewgrf struct {
	// Identifier is the NewGRF's ID. This should correspond to its ID on BaNaNaS.
	Identifier string `json:"id"`
	// Hash is the MD5 checksum that the server reports for this NewGRF.
	Hash string `json:"md5"`
}

type OpenttdTypeCounts struct {
	// Trains, stations.
	Train uint16 `json:"train"`
	// Trucks, freight depots.
	Truck uint16 `json:"truck"`
	// Buses, bus stations.
	Bus uint16 `json:"bus"`
	// Aircraft, airports.
	Aircraft uint16 `json:"aircraft"`
	// Ships, docks.
	Ship uint16 `json:"ship"`
}

type OpenttdCompany struct {
	// The ID of the company. Starts from 0.
	Id uint8 `json:"id"`
	// The company name.
	Name string `json:"name"`
	// The year the company was first founded.
	YearStart uint32 `json:"start_year"`
	// The value of the company, in credits.
	Value uint64 `json:"value"`
	// The amount of disposable cash the company has.
	Money uint64 `json:"cash"`
	// The company's current income.
	Income uint64 `json:"income"`
	// The company's performance index. Maximum score of 1000.
	Performance uint16 `json:"performance"`
	// Whether the company has a password set.
	Passworded bool `json:"is_passworded"`

	// A count of the vehicles and stations the company has.
	Vehicles OpenttdTypeCounts `json:"vehicle_count"`
	Stations OpenttdTypeCounts `json:"station_count"`
}

type OpenttdServerState struct {
	// Status is set to True if the server was parsable, false otherwise.
	Status bool `json:"status"`
	// Error contains any parsing errors.
	Error error `json:"-"`

	// Host is the queried hostname and port combination.
	Host string `json:"host"`
	// Dedicated is set if the server reports itself to be a Dedicated Server (instead of a Listen Server).
	Dedicated bool `json:"dedicated"`
	// Name is the server's advertised Hostname.
	Name string `json:"name"`
	// Version is the server's currently running Version string.
	Version string `json:"version"`
	// NeedPass defines whether the server is private (i.e needs a password)
	NeedPass bool `json:"need-pass"`

	// Language is the given Server Language.
	// If you need the string version of a language, use
	// gopenttd.GetISOLanguage(OpenttdServerState.Language) or gopenttd.GetLanguage(OpenttdServerState.Language)
	Language int `json:"language"`

	// Environment is the environment identifier.
	// If you need the string version of the environment, use
	// gopenttd.GetEnvironment(OpenttdServerState.Environment)
	Environment int `json:"environment"`

	// Map is the name of the map currently running. Note that this will be set to "Random Map" if the map was generated by a seed.
	Map string `json:"map_name"`

	// MapHeight and MapWidth are the height and width of the current map in tiles.
	MapHeight uint16 `json:"map_height"`
	MapWidth  uint16 `json:"map_width"`

	// DateStart and DateCurrent are time objects relating to the start of the game and the current date.
	DateStart   time.Time `json:"date_start"`
	DateCurrent time.Time `json:"date_current"`

	// The following should be self explanatory.
	NumClients    int `json:"clients_active"`
	MaxClients    int `json:"clients_max"`
	NumSpectators int `json:"spectators_active"`
	MaxSpectators int `json:"spectators_max"`
	NumCompanies  int `json:"companies_active"`
	MaxCompanies  int `json:"companies_max"`

	// NewgrfCount is the number of currently active newgrfs.
	NewgrfCount int `json:"newgrf_count"`
	// NewgrfActive is a set of OpenttdNewgrf structs corresponding to the currently active Newgrfs.
	NewgrfActive []OpenttdNewgrf `json:"newgrf_active"`

	// Companies is a list of active company data, where available.
	Companies []OpenttdCompany `json:"companies"`
}
